{"ast":null,"code":"var _jsxFileName = \"/home/om621/Desktop/breaking_bad_backend/client/src/components/Test.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../css/test.css';\nimport loader from '../img/loading.gif';\n\nfunction Test({\n  prevSection,\n  charId\n}) {\n  const [isloading, setIsLoading] = useState(true);\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState([]);\n  useEffect(() => {\n    const loadChar = async () => {\n      const charObject = await axios('https://www.breakingbadapi.com/api/characters/' + charId);\n      let ans = [];\n      ans.push(charObject.data[0].status);\n      ans.push(charObject.data[0].appearance.length);\n      setAnswers(ans);\n      setIsLoading(false);\n    };\n\n    const loadQuestion = async () => {\n      let que = await axios('http://localhost:5000/api/questions');\n      setQuestions(que.data);\n    };\n\n    loadChar();\n    loadQuestion();\n  }, [charId]);\n\n  const goBack = e => {\n    e.preventDefault();\n    prevSection();\n  };\n\n  return isloading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"test-grid loader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 26\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: loader,\n    alt: \"loader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 60\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"test-grid row black-bg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 102\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"coice-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, questions.map((question, index) => /*#__PURE__*/React.createElement(\"fieldset\", {\n    class: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row question-div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-sm-12 question-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"question\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, index + 1, \". \", question.que)), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-sm-12 option-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 19\n    }\n  }, question.options.map((option, i) => /*#__PURE__*/React.createElement(\"div\", {\n    class: \"form-check\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    class: \"form-check-input\",\n    type: \"radio\",\n    name: \"series\",\n    id: i,\n    value: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    class: \"form-check-label\",\n    for: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 29\n    }\n  }, option)))))))));\n}\n\nexport default Test;","map":{"version":3,"sources":["/home/om621/Desktop/breaking_bad_backend/client/src/components/Test.js"],"names":["React","useState","useEffect","axios","loader","Test","prevSection","charId","isloading","setIsLoading","questions","setQuestions","answers","setAnswers","loadChar","charObject","ans","push","data","status","appearance","length","loadQuestion","que","goBack","e","preventDefault","map","question","index","options","option","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AAEA,SAASC,IAAT,CAAc;AAACC,EAAAA,WAAD;AAAcC,EAAAA;AAAd,CAAd,EAAqC;AAEjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMY,QAAQ,GAAG,YAAY;AACzB,YAAMC,UAAU,GAAG,MAAMZ,KAAK,CAAC,mDAAmDI,MAApD,CAA9B;AACA,UAAIS,GAAG,GAAG,EAAV;AACAA,MAAAA,GAAG,CAACC,IAAJ,CAASF,UAAU,CAACG,IAAX,CAAgB,CAAhB,EAAmBC,MAA5B;AACAH,MAAAA,GAAG,CAACC,IAAJ,CAASF,UAAU,CAACG,IAAX,CAAgB,CAAhB,EAAmBE,UAAnB,CAA8BC,MAAvC;AACAR,MAAAA,UAAU,CAACG,GAAD,CAAV;AACAP,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAPD;;AASA,UAAMa,YAAY,GAAG,YAAY;AAC7B,UAAIC,GAAG,GAAG,MAAMpB,KAAK,CAAC,qCAAD,CAArB;AACAQ,MAAAA,YAAY,CAACY,GAAG,CAACL,IAAL,CAAZ;AACH,KAHD;;AAKAJ,IAAAA,QAAQ;AACRQ,IAAAA,YAAY;AAGf,GApBQ,EAoBN,CAACf,MAAD,CApBM,CAAT;;AAsBA,QAAMiB,MAAM,GAAIC,CAAD,IAAO;AAClBA,IAAAA,CAAC,CAACC,cAAF;AACApB,IAAAA,WAAW;AACd,GAHD;;AAKA,SAASE,SAAS,gBAAG;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAkC;AAAK,IAAA,GAAG,EAAEJ,MAAV;AAAkB,IAAA,GAAG,EAAC,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAlC,CAAH,gBAA+E;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAC7F;AAAM,IAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMM,SAAS,CAACiB,GAAV,CAAc,CAACC,QAAD,EAAWC,KAAX,kBACb;AAAU,IAAA,KAAK,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAK,IAAA,KAAK,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAG,IAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCA,KAAK,GAAG,CADT,QACcD,QAAQ,CAACL,GADvB,CADF,CAFF,eAQE;AAAK,IAAA,KAAK,EAAC,sBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIK,QAAQ,CAACE,OAAT,CAAiBH,GAAjB,CAAqB,CAACI,MAAD,EAASC,CAAT,kBACnB;AAAK,IAAA,KAAK,EAAC,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,KAAK,EAAC,kBAAb;AAAgC,IAAA,IAAI,EAAC,OAArC;AAA6C,IAAA,IAAI,EAAC,QAAlD;AAA2D,IAAA,EAAE,EAAEA,CAA/D;AAAkE,IAAA,KAAK,EAAED,MAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAO,IAAA,KAAK,EAAC,kBAAb;AAAgC,IAAA,GAAG,EAAEC,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,MADL,CAFJ,CADF,CAFJ,CARF,CADD,CADD,CADN,CAD6F,CAAjG;AA8BH;;AAED,eAAe1B,IAAf","sourcesContent":["import React , {useState, useEffect} from 'react'; \nimport axios from 'axios'; \nimport '../css/test.css';\nimport loader from '../img/loading.gif'\n\nfunction Test({prevSection, charId}) {\n\n    const [isloading, setIsLoading] = useState(true);\n    const [questions, setQuestions] = useState([]);\n    const [answers, setAnswers] = useState([]);\n\n    useEffect(() => {\n\n        const loadChar = async () => {\n            const charObject = await axios('https://www.breakingbadapi.com/api/characters/' + charId);\n            let ans = [];\n            ans.push(charObject.data[0].status);\n            ans.push(charObject.data[0].appearance.length);\n            setAnswers(ans);\n            setIsLoading(false);\n        }\n\n        const loadQuestion = async () => {\n            let que = await axios('http://localhost:5000/api/questions');\n            setQuestions(que.data);\n        }\n\n        loadChar();\n        loadQuestion();\n        \n\n    }, [charId]);\n\n    const goBack = (e) => {\n        e.preventDefault();\n        prevSection();\n    }\n\n    return ( isloading ? <div className=\"test-grid loader\"><img src={loader} alt=\"loader\" /></div> : <div className=\"test-grid row black-bg\">\n        <form className=\"coice-form\">\n            { questions.map((question, index) => (\n               <fieldset class=\"form-group\">\n                <div class=\"row question-div\">\n                  \n                  <div className=\"col-sm-12 question-box\">\n                    <p className=\"question\">\n                    {index + 1}. {question.que}\n                    </p>\n                  </div>\n\n                  <div class=\"col-sm-12 option-box\">\n\n                    { question.options.map((option, i) => (\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" type=\"radio\" name=\"series\" id={i} value={option}></input>\n                            <label class=\"form-check-label\" for={i}>\n                                {option}\n                            </label>\n                       </div>\n                    ))}\n                   \n                 </div>\n\n               </div>\n             </fieldset>\n            ))}\n        </form>  \n    </div>);\n}\n\nexport default Test;\n"]},"metadata":{},"sourceType":"module"}